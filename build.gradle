import net.neoforged.moddevgradle.internal.RunGameTask

import java.time.LocalDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.17'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
    if(System.env.GITHUB_ACTIONS && System.env.NIGHTLY_BUILD){
        var endfix = System.env.VERSION_IDENTIFIER + "-" + LocalDateTime.now(ZoneOffset.ofHours(8)).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME).replace(':','-')
        archivesName="${archivesName.get()}-${version}-${endfix}-nightly"
        version=''
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {

}

jar{
    manifest {
        attributes(
                "Main-Class":"com.xkball.let_me_see_see.LMSMain",
                "Agent-Class":"com.xkball.let_me_see_see.LMSAgent",
                "Can-Retransform-Classes": "true"
        )
    }
    doLast {
        if (System.env.GITHUB_ACTIONS) {
            File theFile = archiveFile.get().getAsFile()

            def outputFile = new File(System.env.GITHUB_OUTPUT)
            // Use the env-specific line separator for maximally possible compatibility
            def newLine = System.getProperty('line.separator')

            // Write out new env variable for later usage
            outputFile << newLine << "artifact_name=${theFile.getName()}"
            outputFile << newLine << "artifact_publish_name=${archiveBaseName.get()}.jar"
            outputFile << newLine << "artifact_path=${theFile.absolutePath}"
        }
    }
}

tasks.withType(RunGameTask).configureEach{
    dependsOn jar
    systemProperty("LET_ME_SEE_AGENT_JAR_PATH",tasks.jar.archiveFile.get().getAsFile())
    
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

build{
    if (System.env.GITHUB_ACTIONS){
        def outputFile = new File(System.env.GITHUB_OUTPUT)
        def newLine = System.getProperty('line.separator')
        String fileName = jar.archiveFileName.get()
        fileName = fileName.substring(0,fileName.length()-4)
        outputFile << newLine << "jar_name=${fileName}"
    }
}


tasks.register("githubActionOutput",DefaultTask){
    if (System.env.GITHUB_ACTIONS) {
        File theFile = jar.archiveFile.get().getAsFile()
        def outputFile = new File(System.env.GITHUB_OUTPUT)
        // Use the env-specific line separator for maximally possible compatibility
        def newLine = System.getProperty('line.separator')
        def publishName = "${release_name}-${loader_name}-Minecraft${minecraft_version}-${version}.jar"
        // Write out new env variable for later usage
        outputFile << newLine << "artifact_name=${theFile.getName()}"
        outputFile << newLine << "artifact_publish_name=${publishName}"
        outputFile << newLine << "artifact_path=${theFile.absolutePath}"
    }
}